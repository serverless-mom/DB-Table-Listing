/**
 * @fileoverview the async lambda wrapper. In a different file cause we only require it if async
 * is supported
 */
const uuid4 = require('uuid4');
const util = require('util');
const tracer = require('../tracer.js');
const utils = require('../utils.js');
const awsLambdaTrigger = require('../triggers/aws_lambda.js');
const eventInterface = require('../event.js');
const lambdaRunner = require('../runners/aws_lambda.js');
const { STEP_ID_NAME } = require('../consts.js');

/**
 * The epsagon's base lambda wrapper, wrap a lambda function with it to trace it. This version
 * is for async functions.
 * @param {function} functionToWrap The function to wrap and trace
 * @param {string} [runnerResourceType='lambda'] The resource type to set for the runner
 * @param {boolean} [shouldPassRunner=false] True if the runner should be passed to the
 *     function false otherwise. used when additional action in required on the runner on
 *     complex wrappers
 * @param {function} [originalFunctionToWrap=null] The original Function to wrap. Used when the
 *     function to wrap is already wrapped with another proxy, and a critical error occurs.
 * @return {function} The original function, wrapped by our tracer
 */
function baseAsyncLambdaWrapper(
    functionToWrap,
    runnerResourceType = 'lambda',
    shouldPassRunner = false,
    originalFunctionToWrap = null
) {
    return async (originalEvent, originalContext, originalCallback) => {
        tracer.restart();
        let runner;

        try {
            runner = lambdaRunner.createRunner(originalContext, runnerResourceType);
        } catch (err) {
            const wrappedFunction = (
                originalFunctionToWrap === null ?
                    functionToWrap : originalFunctionToWrap
            );
            return wrappedFunction(originalEvent, originalContext, originalCallback);
        }

        tracer.addEvent(runner);

        try {
            const trigger = awsLambdaTrigger.createFromEvent(
                originalEvent,
                originalContext
            );

            tracer.addEvent(trigger);
        } catch (err) {
            tracer.addException(
                err,
                { event: JSON.stringify(originalEvent) }
            );
        }

        const startTime = Date.now();
        const wrappedCallback = (error, result) => {
            if (error !== null) {
                eventInterface.setException(runner, error);
            }
            return originalCallback(error, result);
        };

        const runnerSendUpdateHandler = (() => {
            runner.setDuration(utils.createDurationTimestamp(startTime));
        });

        try {
            runner.setStartTime(utils.createTimestampFromTime(startTime));
            const result = (
                shouldPassRunner ?
                    await functionToWrap(
                        originalEvent,
                        originalContext,
                        wrappedCallback,
                        runner
                    ) :
                    await functionToWrap(originalEvent, originalContext, wrappedCallback)
            );
            await tracer.sendTrace(runnerSendUpdateHandler);
            return result;
        } catch (err) {
            eventInterface.setException(runner, err);
            runnerSendUpdateHandler(); // Doing it here since the send is synchronous on error
            tracer.sendTraceSync();
            throw err;
        }
    };
}

/**
 * Creates a wrapper that adds a step id to the result of a step machine.
 * NOTE: The step will be added to both the return value of the function and
 *     the result the callback was called with. This muight be redundant
 *     sometimes, but is less risk-prone.
 * @param {function} functionToWrap The function to wrap
 * @returns {function} the wrapped function
 */
function createAsyncStepIdAddWrapper(functionToWrap) {
    return async (originalEvent, originalContext, originalCallback, runner) => {
        let step = null;

        const updateStepResult = (result) => {
            if (typeof result === 'object') {
                if (!step) {
                    if (STEP_ID_NAME in originalEvent) {
                        step = Object.assign({}, originalEvent[STEP_ID_NAME]);
                        step.step_num += 1;
                    } else {
                        step = { id: uuid4(), step_num: 0 };
                    }
                }
                result[STEP_ID_NAME] = step; // eslint-disable-line no-param-reassign
                eventInterface.addToMetadata(runner, {
                    steps_dict: step,
                });
            }

            if (process.env.EPSAGON_DEBUG === 'TRUE') {
                // eslint-disable-next-line no-console
                console.log('Step function result update attempt');
                // eslint-disable-next-line no-console
                console.log(
                    'Updated result: ',
                    util.inspect(result, { showHidden: false, depth: null })
                );
            }
        };

        const callbackWrapper = (error, result) => {
            if (!error) {
                updateStepResult(result, originalEvent, runner);
            }
            return originalCallback(error, result);
        };

        const result = await functionToWrap(
            originalEvent,
            originalContext,
            callbackWrapper
        );

        updateStepResult(result, originalEvent, runner);

        return result;
    };
}

module.exports.baseAsyncLambdaWrapper = baseAsyncLambdaWrapper;
module.exports.createAsyncStepIdAddWrapper = createAsyncStepIdAddWrapper;
